<div class="a1"> <h1>Global</h1> <p>Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列属性：</p> </div> <div class="a2"> <h2>#devtools</h2> <ul> <li>类型：boolean</li> <li>默认值：false</li> <li>用法：</li> </ul> <pre><div class="hljs"><code class="lang-js">Vue.config.silent = <span class="hljs-literal">true</span> </code></div></pre> <p>取消 Vue 所有的日志与警告。</p> </div> <div class="a3"> <h2>#errorHandler</h2> <ul> <li>类型：{ [key: string]: Function }</li> <li>默认值：{}</li> <li>用法：</li> </ul> <pre><div class="hljs"><code class="lang-js">Vue.config.optionMergeStrategies._my_option = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">parent, child, vm</span>) </span>{ <span class="hljs-keyword">return</span> child + <span class="hljs-number">1</span> } <span class="hljs-keyword">const</span> Profile = Vue.extend({ <span class="hljs-attr">_my_option</span>: <span class="hljs-number">1</span> }) <span class="hljs-comment">// Profile.options._my_option = 2</span> </code></div></pre> <p>自定义合并策略的选项。</p> <p>合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue 实例上下文被作为第三个参数传入。</p> </div> <div class="a4"> <h1> API</h1> </div> <div class="a5"> <h2>#component</h2> <ul> <li>参数：<br /> {Object} options</li> <li>用法：<br /> 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</li> </ul> <p>data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数</p> <pre><div class="hljs"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mount-point"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></div></pre> <pre><div class="hljs"><code class="lang-js"><span class="hljs-comment">// 创建构造器</span> <span class="hljs-keyword">var</span> Profile = Vue.extend({ <span class="hljs-attr">template</span>: <span class="hljs-string">'&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p&gt;'</span>, <span class="hljs-attr">data</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> { <span class="hljs-attr">firstName</span>: <span class="hljs-string">'Walter'</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">'White'</span>, <span class="hljs-attr">alias</span>: <span class="hljs-string">'Heisenberg'</span> } } }) <span class="hljs-comment">// 创建 Profile 实例，并挂载到一个元素上。</span> <span class="hljs-keyword">new</span> Profile().$mount(<span class="hljs-string">'#mount-point'</span>) </code></div></pre> <p>结果如下：</p> <pre><div class="hljs"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Walter White aka Heisenberg<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </code></div></pre> </div> <div class="a6"> <h2>#filter</h2> <ul> <li>类型：{ [key: string]: Function }</li> <li>默认值：{}</li> <li>用法：</li> </ul> <pre><div class="hljs"><code class="lang-js">Vue.config.optionMergeStrategies._my_option = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">parent, child, vm</span>) </span>{ <span class="hljs-keyword">return</span> child + <span class="hljs-number">1</span> } <span class="hljs-keyword">const</span> Profile = Vue.extend({ <span class="hljs-attr">_my_option</span>: <span class="hljs-number">1</span> }) <span class="hljs-comment">// Profile.options._my_option = 2</span> </code></div></pre> <p>自定义合并策略的选项。</p> <p>合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue 实例上下文被作为第三个参数传入。</p> </div> <div class="a7"> <h1>选项 / 数据</h1> </div> <div class="a8"> <h2>#data</h2> <ul> <li>参数：<br /> {Object} options</li> <li>用法：<br /> 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</li> </ul> <p>data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数</p> <pre><div class="hljs"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mount-point"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></div></pre> <pre><div class="hljs"><code class="lang-js"><span class="hljs-comment">// 创建构造器</span> <span class="hljs-keyword">var</span> Profile = Vue.extend({ <span class="hljs-attr">template</span>: <span class="hljs-string">'&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p&gt;'</span>, <span class="hljs-attr">data</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> { <span class="hljs-attr">firstName</span>: <span class="hljs-string">'Walter'</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">'White'</span>, <span class="hljs-attr">alias</span>: <span class="hljs-string">'Heisenberg'</span> } } }) <span class="hljs-comment">// 创建 Profile 实例，并挂载到一个元素上。</span> <span class="hljs-keyword">new</span> Profile().$mount(<span class="hljs-string">'#mount-point'</span>) </code></div></pre> <p>结果如下：</p> <pre><div class="hljs"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Walter White aka Heisenberg<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </code></div></pre> </div> <div class="a9"> <h2>#methods</h2> <ul> <li>类型：{ [key: string]: Function }</li> <li>默认值：{}</li> <li>用法：</li> </ul> <pre><div class="hljs"><code class="lang-js">Vue.config.optionMergeStrategies._my_option = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">parent, child, vm</span>) </span>{ <span class="hljs-keyword">return</span> child + <span class="hljs-number">1</span> } <span class="hljs-keyword">const</span> Profile = Vue.extend({ <span class="hljs-attr">_my_option</span>: <span class="hljs-number">1</span> }) <span class="hljs-comment">// Profile.options._my_option = 2</span> </code></div></pre> <p>自定义合并策略的选项。</p> <p>合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue 实例上下文被作为第三个参数传入。</p> </div>